name: ci

on:
  push:
    branches:
      - "main"
      - "develop"

jobs:
  push_to_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tema-sport:latest
  
  deploy_via_ssh:
    needs: [ push_to_docker_hub ]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "Generating .env file"
          echo "# Autogenerated .env file" > .env
#          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env
#          echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> .env
#          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
#          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
          echo "IMAGE_REPO=${{ env.image_repository_name }}" >> .env
          echo "RELEASE_VERSION=${{ env.TAG_NAME }}" >> .env
          echo "ADMIN_IDS=${{ secrets.ADMIN_IDS }}" >> .env
          echo "CRYPTO_USERS_IDS=${{ secrets.CRYPTO_USERS_IDS }}" >> .env
          echo "TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}" >> .env
          echo "ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}" >> .env

      - name: copy docker-compose and .env files to target server via scp
        uses: appleboy/scp-action@v0.1.3
        with:
          overwrite: true
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          passphrase: ${{ secrets.PASSPHRASE }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: ".env, docker-compose.yaml"
          target: "~/.deploy/${{ github.event.repository.name }}/"
          debug: true

      - name: copy nginx/conf files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          overwrite: true
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          passphrase: ${{ secrets.PASSPHRASE }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "nginx/app.conf"
          target: "~/.deploy/${{ github.event.repository.name }}/nginx/conf/"
          strip_components: 1

      - name: copy certbot/renew files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          overwrite: true
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          passphrase: ${{ secrets.PASSPHRASE }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "certbot/renew/cert-renew-crontab,certbot/renew/Dockerfile"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./docker-compose.yaml pull
            docker compose -f ./docker-compose.yaml down
            docker compose -f ./docker-compose.yaml --env-file ./.env up -d
            docker system prune -a -f