version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: tema
      POSTGRES_PASSWORD: tema
      POSTGRES_DB: tema
    ports:
      - "5432:5432"
  #    volumes:
  #      - postgres_data:/var/lib/postgresql/data

  #  backend-db-storage:
  #    build:
  #      context: .
  #      dockerfile: ./backend/common/db_storage/Dockerfile
  #    ports:
  #      - "8007:8000"
  #    environment:
  #      DB_USER: user
  #      DB_PASSWORD: password
  #      DB_HOST: db
  #      DB_NAME: mydatabase
  #      DB_PORT: 5432
  #    depends_on:
  #      - db
  #      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9093,PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9093,PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092" ]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka-topics-creator:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka-topics-creator
    depends_on:
      kafka:
          condition: service_healthy


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
#
#  backend-competition:
#    container_name: competition
#    build:
#      context: .
#      dockerfile: ./backend/common/competition_management/Dockerfile
#    ports:
#      - "8001:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#
#  backend-participant:
#    container_name: participant
#    build:
#      context: .
#      dockerfile: ./backend/common/participant_management/Dockerfile
#    ports:
#      - "8002:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy

#  backend-reporting:
#    container_name: reporting
#    build:
#      context: .
#      dockerfile: ./backend/common/reporting_management/Dockerfile
#    ports:
#      - "8003:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy


#  backend-s3-storage:
#    container_name: s3-storage
#    build:
#      context: .
#      dockerfile: ./backend/common/s3_storage/Dockerfile
#    ports:
#      - "8004:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#
#  backend-canoe-timing:
#    container_name: canoe-timing
#    build:
#      context: .
#      dockerfile: ./backend/canoe_slalom/timing_management/Dockerfile
#    ports:
#      - "8005:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#
#  backend-canoe-penalty:
#    container_name: canoe-penalty
#    build:
#      context: .
#      dockerfile: ./backend/canoe_slalom/penalty_management/Dockerfile
#    ports:
#      - "8006:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
#      db:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#
#  frontend:
#    container_name: frontend
#    build:
#      context: .
#      dockerfile: ./frontend/Dockerfile
#    ports:
#      - "3000:3000"
#    depends_on:
#      - backend-competition
#      - backend-participant
#      #      - backend-judging
#      - backend-reporting
#      - backend-canoe-timing
#      - backend-canoe-penalty

volumes:
  postgres_data:
  minio_data:

#version: '3.8'
#
#services:
#
#  #
#  #  backend-participant:
#  #    build: ./backend/common/participant_management .
#  #    ports:
#  #      - "8001:8000"
#  #    environment:
#  #      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#  #    depends_on:
#  #      - db
#  #      - kafka
#  #
#  #  backend-reporting:
#  #    build: ./backend/common/reporting_management .
#  #    ports:
#  #      - "8003:8000"
#  #    environment:
#  #      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#  #    depends_on:
#  #      - db
#  #      - kafka
#  #
#  #  backend-s3-storage:
#  #    build: ./backend/common/s3_storage .
#  #    ports:
#  #      - "8004:8000"
#  #    environment:
#  #      - AWS_ACCESS_KEY_ID=minioadmin
#  #      - AWS_SECRET_ACCESS_KEY=minioadmin123
#  #      - AWS_DEFAULT_REGION=us-east-1
#  #    depends_on:
#  #      - minio
#  #
#  #  backend-db-storage:
#  #    build: ./backend/common/db_storage .
#  #    ports:
#  #      - "8007:8000"
#  #    environment:
#  #      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#  #    depends_on:
#  #      - db
#  #      - kafka
#  #
#  #  backend-canoe-timing:
#  #    build: ./backend/canoe_slalom/timing_management .
#  #    ports:
#  #      - "8005:8000"
#  #    environment:
#  #      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#  #    depends_on:
#  #      - db
#  #      - kafka
#  #
#  #  backend-canoe-penalty:
#  #    build: ./backend/canoe_slalom/penalty_management .
#  #    ports:
#  #      - "8006:8000"
#  #    environment:
#  #      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#  #    depends_on:
#  #      - db
#  #      - kafka
#  #
#  #  frontend:
#  #    build: ./frontend .
#  #    ports:
#  #      - "3000:3000"
#  #    depends_on:
#  #      - backend-competition
#  #      - backend-participant
#  ##      - backend-judging
#  #      - backend-reporting
#  #      - backend-canoe-timing
#  #      - backend-canoe-penalty
#  #
##  db:
##    image: postgres:latest
##    environment:
##      POSTGRES_USER: user
##      POSTGRES_PASSWORD: password
##      POSTGRES_DB: mydatabase
##    volumes:
##      - postgres_data:/var/lib/postgresql/data
#
#  #  kafka:
#  #    image: wurstmeister/kafka:latest
#  #    ports:
#  #      - "9092:9092"
#  #    environment:
#  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#  #      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#  #      KAFKA_LISTENERS:
#  #    depends_on:
#  #      - zookeeper
#
#  #  kafka:
#  #    image: confluentinc/cp-kafka:latest
#  #    container_name: kafka
#  ##    networks:
#  ##      - kafka-network
#  #    depends_on:
#  #      - zookeeper
#  #    ports:
#  #      - 9092:9092
#  #      - 29092:29092
#  #    environment:
#  #      KAFKA_BROKER_ID: 1
#  #      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#  #      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#  #    healthcheck:
#  #      test: ["CMD", "java", "-jar", "/Ping.jar", "localhost", "9092"]
#  #      interval: 30s
#  #      timeout: 10s
#  #      retries: 4
#  kafka:
#    image: confluentinc/cp-kafka:7.0.1
#    container_name: kafka
#    #    networks:
#    #      - local-kafka
#    ports:
#      # To learn about configuring Kafka for access across networks see
#      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
#      - "9092:9092"
#      - "9093:9093"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://kafka:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
#    healthcheck:
#      test: unset JMX_PORT && KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-Dcom.sun.management.jmxremote.rmi.port=9999" && kafka-broker-api-versions --bootstrap-server=localhost:9092
#      interval: 30s
#      timeout: 10s
#      retries: 10
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    #    networks:
#    #      - local-kafka
#    depends_on:
#      - kafka
#    ports:
#      - "7777:8080"
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=kafka
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#
#
#  #  zookeeper:
#  #    image: wurstmeister/zookeeper:latest
#  #    ports:
#  #      - "2181:2181"
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    #    networks:
#    #      - kafka-network
#    ports:
#      - 2181:2181
#
#  #  kafka-ui:
#  #    container_name: kafka-ui
#  #    image: provectuslabs/kafka-ui:latest
#  ##    networks:
#  ##      - kafka-network
#  #    ports:
#  #      - 8080:8080
#  #    environment:
#  #      DYNAMIC_CONFIG_ENABLED: true
#  #    depends_on:
#  #      - kafka
#  #
#  #  minio:
#  #    image: minio/minio
#  #    container_name: minio
#  #    environment:
#  #      MINIO_ROOT_USER: minioadmin
#  #      MINIO_ROOT_PASSWORD: minioadmin123
#  #    command: server /data
#  #    ports:
#  #      - "9000:9000"
#  #      - "9001:9001"
#  #    volumes:
#  #      - minio_data:/data
#  backend-competition:
#    build:
#      context: .
#      dockerfile: ./backend/common/competition_management/Dockerfile
#    ports:
#      - "8000:8000"
#    environment:
#      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
#    depends_on:
##      db:
##        condition: service_started
#      kafka:
#        condition: service_healthy
#  volumes:
#    postgres_data:
#    minio_data:
